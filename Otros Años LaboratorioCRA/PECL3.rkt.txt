;; Booleanos

(define true (lambda (x y) x))
(define false (lambda (x y) y))
(define neg (lambda (x) (x false true)))                        
(define and (lambda (x y) (x y false)))
(define or (lambda (x y) (x true y)))

;; Pares ordenados
              
(define par (lambda (x)
              (lambda (y)
                (lambda (f) (f x y)))))

(define primero (lambda (p) (p true)))
(define segundo (lambda (p) (p false)))

;; Combinador de punto fijo

(define Y
  (lambda (f)
    ((lambda (x) (f (lambda (v) ((x x) v))))
     (lambda (x) (f (lambda (v) ((x x) v)))))))

;; Orden en naturales y test de nulidad

(define esmenoroigualnat (lambda (n)
                             (lambda (m)
                                (escero ((restanat n) m)))))
                         
(define esmayoroigualnat (lambda (n)
                            (lambda (m)
                               (escero ((restanat m) n)))))
                         
(define esmenornat (lambda (n)
                     (lambda (m)
                       (and ((esmenoroigualnat n) m) (noescero ((restanat m) n))))))

(define esmayornat (lambda (n)
                     (lambda (m)
                       (and ((esmayoroigualnat n) m) (noescero ((restanat n) m))))))

(define esigualnat (lambda (n)
                     (lambda (m)
                       (and ((esmayoroigualnat n) m) ((esmenoroigualnat n) m)))))

(define escero (lambda (n)
                 ((n (lambda (x) false)) true)))

(define noescero (lambda (n)
                    (neg (escero n))))

;; Aritmetica natural.

(define zero (lambda (f)
               (lambda (x) x)))

(define sucesor (lambda (n)
                  (lambda (f)
                    (lambda (x)
                     (f((n f) x))))))

(define un (sucesor zero))
(define deux (sucesor un))
(define trois (sucesor deux))
(define quatre (sucesor trois))
(define cinq (sucesor quatre))
(define six (sucesor cinq))
(define sept (sucesor six))
(define huit (sucesor sept))
(define neuf (sucesor huit))
(define dix (sucesor neuf))
(define onze (sucesor dix))
(define douze (sucesor onze))
(define treize (sucesor douze))
(define quatorze (sucesor treize))
(define quinze (sucesor quatorze))
(define seize (sucesor quinze))
(define dix-sept (sucesor seize))
(define dix-huit (sucesor dix-sept))
(define dix-neuf (sucesor dix-huit))
(define vingt (sucesor dix-neuf))

;; Comprobar

(define comprobar (lambda (n)
                    ((n (lambda (x) (+ 1 x))) 0)))

;; Suma naturales

(define sumnat (lambda (n)
                 (lambda (m)
                   ((n (lambda (x) (sucesor x))) m))))

;; Producto naturales

(define prodnat (lambda (n)
                   (lambda (m)
                     (lambda (f)
                       (lambda (x) ((m (n f)) x))))))
                     
(define prefn (lambda (f)
                (lambda (p)
                  ((par (f (primero p))) (primero p)))))

;; Predecesor y resta 

(define predecesor (lambda (n)
                     (lambda (f)
                       (lambda (x)
                            (segundo ((n ((lambda (g)
                                             (lambda (p) ((prefn g) p))) f)) ((par x) x)))))))
                         
(define restanat (lambda (n)
                     (lambda (m)
                        ((m (lambda (x) (predecesor x))) n))))                                                 

;; Resto de la division eucli­dea. Si el divisor es cero, devuelve false.

(define restonataux
    (lambda (n)
        (lambda (m)
            ((Y (lambda (f)
                 (lambda (x)
                    ((((esmayoroigualnat x) m)  
                        (lambda (no_use)
                            (f ((restanat x) m))
                        )
                        (lambda (no_use)
                            x
                        )
                    )
                        zero)    ; Pasa zero como argumento de no_use
                )
            ))
                n)  ; Pasa n como el valor inicial de x.
        )
))

(define restonat (lambda (n)
                      (lambda (m)
                        (((escero m) (lambda (no_use) false) (lambda (no_use) ((restonataux n) m))) zero))))

;; Cociente de la division euclidea. Al igual que el resto, devuelve false si se divide por cero.

(define cocientenataux
    (lambda (n)
        (lambda (m)
            ((Y (lambda (f)
                (lambda (x)
                    ((((esmayoroigualnat x) m)  
                        (lambda (no_use)
                            (sucesor (f ((restanat x) m)))  
                        )
                        (lambda (no_use)
                            zero
                        )
                    )
                        zero)    ; Pasa zero como argumento de no_use
                )
            ))
                n)  ; Pasa n como el valor inicial de x.
        )
    )
)

(define cocientenat (lambda (n)
                      (lambda (m)
                        (((escero m) (lambda (no_use) false) (lambda (no_use) ((cocientenataux n) m))) zero))))

;; Maximo comon denominador.

(define mcdnat
    (lambda (n)
        (lambda (m)
            (((Y (lambda (f)
                   (lambda (x)
                     (lambda(y)
                      (((escero y)  
                       (lambda (no_use)
                            x
                        ) 
                       (lambda (no_use)
                            ((f y)((restonat x) y)) 
                        )
                        
                    )
                        zero)    ; Pasa zero como argumento de no_use
                ))
            ))
                n) ; Pasa n como el valor inicial de x.
          m)       ; Pasa m como el valor inicial de y.
    )
))

;;;; Paridad

(define par? (lambda (n)
               (escero ((restonat n) deux))))

(define cuadrado (lambda (n)
                   ((prodnat n) n)))


;;;;; Potencias de naturales usando algo binario.

(define potencianat
    (lambda (n)
        (lambda (m)
            ((Y (lambda (f)
                (lambda (y)
                    (((escero y)
                        (lambda (no_use)
                            un
                        )
                        (lambda (no_use)
                          (((par? y)
                           (lambda (no_use1)
                             (cuadrado (f ((cocientenat y) deux))))
                           (lambda (no_use1)
                             ((prodnat n) (f (predecesor y))))) zero)
                        )
                    )
                        zero)    ; Pasa zero como argumento de no_use
                )
            ))
                m)  ; Pasa n como el valor inicial de x.
        )
    )
)

;;;;;; Definicion de algunos enteros. Se codifican los enteros mediante pares de naturales: el par (m,n) es una representaciÃ³n de m-n. Es obvio que varios
;;;;;; pares codifican el mismo entero. Por ejemplo, (7,5)=(9,7). Por lo tanto, los enteros se definen como el conjunto cociente de NxN mediante la relaciÃ³n 
;;;;;; de equivalencia R dada por
;;;;;;
;;;;;;                     (m,n) R (m',n') si y solo si m-n=m'-n'

(define cero ((par zero) zero))
(define -uno ((par zero) un))
(define -dos ((par zero) deux))
(define -tres ((par zero) trois))
(define -cuatro ((par zero) quatre))
(define -cinco ((par zero) cinq))
(define -seis ((par zero) six))
(define -siete ((par zero) sept))
(define -ocho ((par zero) huit))
(define -nueve ((par zero) neuf))
(define -diez ((par zero) dix))
(define -once ((par zero) onze))
(define -doce ((par zero) douze))
(define -trece ((par zero) treize))
(define -catorce ((par zero) quatorze))
(define -quince ((par zero) quinze))
(define -dieciseis ((par zero) seize))
(define -diecisiete ((par zero) dix-sept))
(define -dieciocho ((par zero) dix-huit))
(define -diecinueve ((par zero) dix-neuf))
(define -veinte ((par zero) vingt))
(define uno ((par un) zero))
(define dos ((par deux) zero))
(define tres ((par trois) zero))
(define cuatro ((par quatre) zero))
(define cinco ((par cinq) zero))
(define seis ((par six) zero))
(define siete ((par sept) zero))
(define ocho ((par huit) zero))
(define nueve ((par neuf) zero))
(define diez ((par dix) zero))
(define once ((par onze) zero))
(define doce ((par douze) zero))
(define trece ((par treize) zero))
(define catorce ((par quatorze) zero))
(define quince ((par quinze) zero))
(define dieciseis ((par seize) zero))
(define diecisiete ((par dix-sept) zero))
(define dieciocho ((par dix-huit) zero))
(define diecinueve ((par dix-neuf) zero))
(define veinte ((par vingt) zero))


;; Orden, valor absoluto y tests de nulidad, positividad y negatividad. 
;; m-n > m'-n' si y solo si m+n' > m'+n e igual con el resto

(define esmayoroigualent (lambda (r)
                           (lambda (s)
                             ((esmayoroigualnat ((sumnat (primero r)) (segundo s))) ((sumnat (primero s)) (segundo r)))))) 

(define esmenoroigualent (lambda (r)
                           (lambda (s)
                             ((esmenoroigualnat ((sumnat (primero r)) (segundo s))) ((sumnat (primero s)) (segundo r))))))

(define esmayorent (lambda (r)
                           (lambda (s)
                             ((esmayornat ((sumnat (primero r)) (segundo s))) ((sumnat (primero s)) (segundo r))))))

(define esmenorent (lambda (r)
                           (lambda (s)
                             ((esmenornat ((sumnat (primero r)) (segundo s))) ((sumnat (primero s)) (segundo r))))))

(define esigualent (lambda (r)
                           (lambda (s)
                             ((esigualnat ((sumnat (primero r)) (segundo s))) ((sumnat (primero s)) (segundo r))))))

(define absoluto (lambda (r)
                    (((esmayoroigualnat (primero r)) (segundo r)) ((par ((restanat (primero r)) (segundo r))) zero) ((par ((restanat (segundo r)) (primero r))) zero))))

(define negativo (lambda (r)
                   ((esmenorent r) cero)))

(define positivo (lambda (r)
                   ((esmayorent r) cero)))

(define esceroent (lambda (r)
                     ((esigualnat (primero r)) (segundo r))))
                      
(define noesceroent (lambda (r)
                       (neg (esceroent r))))


;; Reduccion a representante canonico de la clase de equivalencia.

(define reducir (lambda (r)
                  (((esmayoroigualnat (primero r)) (segundo r)) 
                        ((par ((restanat (primero r)) (segundo r))) zero)
                        ((par zero) ((restanat (segundo r)) (primero r))))))


;; Aritmetica entera 

(define testenteros (lambda (r)
                      (- (comprobar (primero r)) (comprobar (segundo r)))))

(define sument (lambda (r)
                  (lambda (s)
                    (reducir ((par ((sumnat (primero r)) (primero s))) ((sumnat (segundo r)) (segundo s)))))))

(define prodent (lambda (r)
                  (lambda (s)
                    (reducir ((par ((sumnat ((prodnat (primero r)) (primero s))) ((prodnat (segundo r)) (segundo s))))
                          ((sumnat ((prodnat (primero r)) (segundo s))) ((prodnat (segundo r)) (primero s))))))))                       

(define restaent (lambda (r)
                   (lambda (s)
                     (reducir ((par ((sumnat (primero r)) (segundo s))) ((sumnat (segundo r)) (primero s)))))))

(define opuesto (lambda (r)
                  ((par (segundo r)) (primero r))))


;; Lo siguiente reduce la division de enteros a division de naturales. Si m mayor o igual que 0 y n > 0, y si q y r son cociente y resto de la division de m entre n, se tiene
;;  m  = q       * n        + r
;;  m  = (-q)    * (-n)     + r
;; -m  = (-(q+1))* n        + (n-r)
;; -m  = (q+1)   * (-n)     + (n-r),
;; siempre y cuando el resto no sea cero. Cuando el divisor es cero, la funciÃ³n cocienteent devuelve false.

(define cocienteent_aux (lambda (r)
                          (lambda (s)
                            ((cocientenat (primero (absoluto r))) (primero (absoluto s))))))

; Caso1: resto cero. Si m= q*n, entonces -m= (-q)*n, -m = q* (-n) y m= (-q)*(-n).

(define cocienteentaux-caso1 (lambda (r)
                               (lambda (s)
                                  ((or (and ((esmayoroigualent r) cero) (positivo s)) (and (negativo r) (negativo s))) ((par ((cocientenat (primero (absoluto r))) (primero (absoluto s)))) zero)
                                                                                                                       ((par zero) ((cocientenat (primero (absoluto r))) (primero (absoluto s))))))))
                              
; Caso 2: resto no nulo

(define cocienteentaux-caso2 (lambda (r)
                                (lambda (s)
                                    (((esmayoroigualent r) cero) ((positivo s) ((par ((cocienteent_aux r) s)) zero) ((par zero) ((cocienteent_aux r) s)))
                                                                 ((positivo s) ((par zero) (sucesor ((cocienteent_aux r) s))) ((par (sucesor ((cocienteent_aux r) s))) zero))))))
; Cociente cuando no hay division por cero

(define cocienteentaux (lambda (r)
                         (lambda (s)
                           ((escero ((restonat (primero (absoluto r))) (primero (absoluto s)))) ((cocienteentaux-caso1 r) s) ((cocienteentaux-caso2 r) s)))))

; Cociente considerando la division por cero

(define cocienteent (lambda (r)
                      (lambda (s)
                        (((esceroent s) (lambda (no_use) false) (lambda (no_use) ((cocienteentaux r) s))) zero))))

; Resto. Si se divide por cero, devuelve false

(define restoentaux1 (lambda (r)
                        (lambda (s)
                          ((or (and ((esmayoroigualent r) cero) (positivo s)) (and ((esmayoroigualent r) cero) (negativo s))) ((par ((restonat (primero (absoluto r))) (primero (absoluto s)))) zero)
                                                                                                           ((par ((restanat (primero (absoluto s)))((restonat (primero (absoluto r))) (primero (absoluto s))))) zero)))))

(define restoentaux (lambda (r)
                       (lambda (s)
                          ((escero ((restonat (primero (absoluto r))) (primero (absoluto s)))) cero ((restoentaux1 r) s)))))

(define restoent (lambda (r)
                      (lambda (s)
                        (((esceroent s) (lambda (no_use) false) (lambda (no_use) ((restoentaux r) s))) zero))))

;; Como mcd (r,s)=mcd(|r|,|s|), se tiene

(define mcdent (lambda (r)
                 (lambda (s)
                   ((par ((mcdnat (primero (absoluto r))) (primero (absoluto s)))) zero))))

;; Mi­nimo comun multiplo

(define mcment (lambda (r)
                 (lambda (s)
                   ((cocienteent ((prodent r) s)) ((mcdent r) s)))))



;;;;;;;;;;;;;;;;;;;;;
;;;; RACIONALES ;;;;;
;;;;;;;;;;;;;;;;;;;;;

;DEFINICIÓN:

;;;; Muestra los racionales
(define test_racionales (lambda (a)
                          (list (testenteros (primero a)) (testenteros (segundo a)))))

;;;; Reduce un racional a su representante canónico
(define reducir_racionales (lambda (a)
                             ((par ((cocienteent (primero a)) ((mcdent (primero a)) (segundo a)))) ((cocienteent (segundo a)) ((mcdent (primero a)) (segundo a))))
                             )
  )

;;;;Suma dos racionales
(define suma_racionales (lambda (a)
                          (lambda (b)
                          (reducir_racionales ((par ((sument ((prodent (primero a)) (segundo b))) ((prodent(primero b)) (segundo b)))) ((prodent (segundo a)) (segundo b)))))))

;;;;Resta dos racionales
(define resta_racionales (lambda (a)
                          (lambda (b)
                          (reducir_racionales ((par ((restaent ((prodent (primero a)) (segundo b))) ((prodent(primero b)) (segundo a)))) ((prodent (segundo a)) (segundo b)))))))


;;;;Producto de dos racionales
(define multiplica_racionales (lambda (a)
                                (lambda (b)
                                  (reducir_racionales
                                                      ((par ((prodent (primero a)) (primero b))) 
                                                            ((prodent (segundo a)) (segundo b)))
                                                            ))))  

;;;;Inverso racional
(define inverso_racional  (lambda (a)
                            (reducir_racionales((par (segundo a)) (primero a)))))

         
;;;;;;;;;;;;;;;;;;;;;;;;;;       
;;;;Orden e igualdad;;;;;;

(define esigual_racionales (lambda(a)
                             (lambda (b)
                               (
                                (esigualent ((prodent (primero a)) (segundo b))) 
                                            ((prodent (primero b)) (segundo a)))
                               )
                             )
  )

(define esmenor_racionales (lambda(a)
                             (lambda (b)
                               (
                                (esmenorent ((prodent (primero a)) (segundo b))) 
                                            ((prodent (primero b)) (segundo a)))
                               )
                             )
  )

(define esmayor_racionales (lambda(a)
                             (lambda (b)
                               (
                                (esmayorent ((prodent (primero a)) (segundo b))) 
                                            ((prodent (primero b)) (segundo a)))
                               )
                             )
  )

;;;;;;;;;;;;;;
;; MATRICES ;;
;;;;;;;;;;;;;;
(define test_matrices (lambda (m)
                        (list (list (test_racionales (primero (primero m))) (test_racionales (segundo (primero m)))) (list (test_racionales (primero (segundo m))) (test_racionales (segundo (segundo m)))))
                        )
  )


(define matriz (lambda (r11)
                 (lambda (r12)
                   (lambda (r21)
                     (lambda (r22) 
                       ((par ((par r11) r12)) ((par r21) r22))
                       )
                     )
                   )
                 )
  )

;;;; OPERACIONES ;;;;
(define suma_matrices (lambda (m)
                        (lambda (n)
                          ((par 
                            ((par ((suma_racionales (primero (primero m))) (primero (primero n))))
                             ((suma_racionales (segundo (primero m))) (segundo (primero n))))) 
                           ((par ((suma_racionales (primero (segundo m))) (primero (segundo n)))) 
                            ((suma_racionales (segundo (segundo m))) (segundo (segundo n)))))
                          )
                        )
  )


(define multiplica_matrices (lambda (m)
                              (lambda (n)
                                ((par 
                                  ((par ((suma_racionales ((multiplica_racionales (primero (primero m))) (primero (primero n)))) ((multiplica_racionales (segundo (primero m))) (primero (segundo n))))) 
                                   ((suma_racionales ((multiplica_racionales (primero (primero m))) (segundo (primero n)))) ((multiplica_racionales (segundo (primero m))) (segundo (segundo n)))))) 
                                 ((par ((suma_racionales ((multiplica_racionales (primero (segundo m))) (primero (primero n)))) ((multiplica_racionales (segundo (segundo m))) (primero (segundo n))))) 
                                  ((suma_racionales ((multiplica_racionales (primero (segundo m))) (segundo (primero n)))) ((multiplica_racionales (segundo (segundo m))) (segundo (segundo n))))))
                                )
                              )
  )

(define determinante_matriz (lambda (m)
                              ((resta_racionales
                                ((multiplica_racionales (primero (primero m))) (segundo (segundo m))))
                               ((multiplica_racionales (segundo (primero m))) (primero (segundo m))))
                              )
  )

(define tiene_inversa? (lambda (m)
                        (neg ((esigual_racionales (determinante_matriz m)) ((par cero) uno)))
                        )
  )

(define inversa_matriz (lambda (m)
                         ((par 
                           ((par ((multiplica_racionales (segundo (segundo m))) (inverso_racional (determinante_matriz m))))
                                 ((multiplica_racionales ((resta_racionales ((par cero) uno)) (segundo (primero m)))) (inverso_racional (determinante_matriz m))))) 
                           ((par ((multiplica_racionales ((resta_racionales ((par cero) uno)) (primero (segundo m)))) (inverso_racional (determinante_matriz m))))
                            ((multiplica_racionales (primero (primero m))) (inverso_racional (determinante_matriz m)))))
                          )
                         
  )
  
 


(define cuadrado_rac (lambda (n)
                       ((multiplica_matrices n) n)))


;;;;; Potencias de matrices usando algo binario.

(define potencia_matrices(lambda (n)
                             (lambda (m)
                               ((Y (lambda (f)
                                     (lambda (y)
                                       (((escero y)
                                         (lambda (no_use)
                                           ((((matriz ((par uno) uno)) ((par cero) uno)) ((par uno) uno)) 
((par cero) uno))
                                           )
                                         (lambda (no_use)
                                           ((((esigualnat y) un)
                                             (lambda (no_use2)
                                               n
                                               )
                                             (lambda (no_use2)
                                               (((par? y)
                                                 (lambda (no_use1)
                                                   (cuadrado_rac (f ((cocientenat y) deux))))
                                                 (lambda (no_use1)
                                                   ((multiplica_matrices n) (f (predecesor y))))) zero)
                                               )
                                             )
                                            zero)
                                           )
                                         )
                                        zero)
                                       )
                                     ))
                                m)
                               )
                             )
  )

(define fibonacci (lambda (n)
                    ((escero n)
                      ((par cero)uno)
                      (primero (segundo ((potencia_matrices ((((matriz ((par cero) uno)) ((par uno) uno)) ((par uno) uno)) ((par uno) uno))) n)))
                    )))


